name: Packer with Terraform

on:
  push:
    branches: [ feature/cicd ]

jobs:
  packer_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Packer build on AWS
        uses: ExitoLab/packer_build_action_aws@v0.2.10
        with:
          templateFile: 'packer-template.json'
          workingDir: 'ami'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          AWS_DEFAULT_REGION: ap-south-1
          GITHUB_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          NEW_SECRET: ${{ secrets.NEW_SECRET }}
          GITHUB_SHA: ${{ github.sha }}
      - uses: actions/upload-artifact@master
        with:
          name: ami-id
          path: build/ami-id.txt
        

  terraform_deploy:
    runs-on: ubuntu-latest
    environment: production

    needs: packer_build

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@master
      with:
        name: ami-id
        path: build/ami-id.txt
    - run: cat build/ami-id.txt

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve